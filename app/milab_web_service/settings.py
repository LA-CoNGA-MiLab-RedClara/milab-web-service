"""
Django settings for milab_web_service project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
from os import environ
from django.urls import reverse_lazy
import saml2
import saml2.saml

import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(environ.get("DEBUG", default=1))

ALLOWED_HOSTS = environ.get("DJANGO_ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mainApp',
    'djangosaml2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'djangosaml2.middleware.SamlSessionMiddleware',
]

ROOT_URLCONF = 'milab_web_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'milab_web_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': environ.get("SQL_ENGINE", 'django.db.backends.sqlite3'),
        'NAME': environ.get("SQL_DATABASE", str(BASE_DIR / "db.sqlite3")),
        'USER': environ.get("SQL_USER", "user"),
        'PASSWORD': environ.get("SQL_PASSWORD", "password"),
        'HOST': environ.get("SQL_HOST", "localhost"),
        'PORT': environ.get("SQL_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/staticfiles/'
STATIC_ROOT = str(BASE_DIR / "staticfiles")
### MEDIA_URL = '/mediafiles/'
### MEDIA_ROOT = str(BASE_DIR / "mediafiles") #  By luixip

MEDIA_URL = '/media/' # Add by luixip
MEDIA_ROOT = os.path.join(BASE_DIR,'media') # Add by luixip



SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
)

BASE_URL = environ.get("HOST_NAME", "localhost")
LOGIN_URL = '/saml/login/'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
ACS_DEFAULT_REDIRECT_URL = reverse_lazy('/')
LOGIN_REDIRECT_URL = '/'
SAML_IGNORE_LOGOUT_ERRORS = True
SAML_CREATE_UNKNOWN_USER = True
SAML_CONFIG = {
    'name': 'MiLab WebApp SP',
    # full path to the xmlsec1 binary programm
    'xmlsec_binary': '/usr/bin/xmlsec1',

    # your entity id, usually your subdomain plus the url to the metadata view
    'entityid': f'https://{BASE_URL}/saml/metadata/',

    # directory with attribute mapping
    # 'attribute_map_dir': BASE_DIR / 'attribute-maps',

    # this block states what services we provide
    'service': {
        # we are just a lonely SP
        'sp': {
            'name': 'Federated Django sample SP',
            'name_id_format': "urn:oasis:names:tc:SAML:2.0:nameid-format:transient",

            # For Okta add signed logout requets. Enable this:
            # "logout_requests_signed": True,

            'endpoints': {
                # url and binding to the assetion consumer service view
                # do not change the binding or service name
                'assertion_consumer_service': [
                    (f'https://{BASE_URL}/saml/acs/',
                     saml2.BINDING_HTTP_POST),
                ],
                # url and binding to the single logout service view
                # do not change the binding or service name
                'single_logout_service': [
                    # Disable next two lines for HTTP_REDIRECT for IDP's that only support HTTP_POST. Ex. Okta:
                    (f'https://{BASE_URL}/saml/ls/',
                     saml2.BINDING_HTTP_REDIRECT),
                    (f'https://{BASE_URL}/saml/ls/post',
                     saml2.BINDING_HTTP_POST),
                ],
            },
            # Mandates that the identity provider MUST authenticate the
            # presenter directly rather than rely on a previous security context.
            'force_authn': False,

            # Enable AllowCreate in NameIDPolicy.
            'name_id_format_allow_create': False,

            # attributes that this project need to identify a user
            #'required_attributes': ['uid'],

            # attributes that may be useful to have but not required
            #'optional_attributes': ['eduPersonAffiliation'],

        },
    },

    # where the remote metadata is stored, local, remote or mdq server.
    # One metadatastore or many ...
    'metadata': {
        'remote': [{"url": environ.get("IDP_METADATA_LOCATION"),
                    "disable_ssl_certificate_validation": True}, ],
    },

    # set to 1 to output debugging information
    'debug': 1,

    # Signing
    'key_file': str(BASE_DIR / 'private.key'),  # private part
    'cert_file': str(BASE_DIR / 'public.pem'),  # public part

    # Encryption
    'encryption_keypairs': [{
        'key_file': str(BASE_DIR / 'private.key'),  # private part
        'cert_file': str(BASE_DIR / 'public.pem'),  # public part
    }],

    # own metadata settings
    'contact_person': [
        {'given_name': 'Milab',
         'sur_name': 'User',
         'company': 'Milab-Site',
         'email_address': 'milab@adsaf.afs',
         'contact_type': 'technical'},
    ],
    # you can set multilanguage information here
    'organization': {
        'name': [('Milab', 'es'), ('Milab', 'en')],
        'display_name': [('Milab', 'es'), ('Milab', 'en')],
        'url': [(BASE_URL, 'es'), (BASE_URL, 'en')],
    },
}
SAML_ATTRIBUTE_MAPPING = {
    'uid': ('username', ),
    'mail': ('email', ),
    'cn': ('first_name', ),
    'sn': ('last_name', ),
}
